// This file is autogenerated. Edit Mathx_ArrayVector.tt instead.
namespace AntilatencyMath {

    using T = System.Single;

    public static partial class Mathx {

        public static T[] selectIndices(this T[] vector, int[] indices) {
            var result = new T[indices.Length];
            for (int i = 0; i < indices.Length; i++)
                result[i] = vector[indices[i]];

            return result;
        }

        public static T[] abs(T[] v) {
            var result = new T[v.Length];
            for (int i = 0; i < v.Length; i++)
                result[i] = System.Math.Abs(v[i]);

            return result;
        }

        public static T[] sqr(T[] v) {
            var result = new T[v.Length];
            for (int i = 0; i < v.Length; i++)
                result[i] = v[i] * v[i];

            return result;
        }

        public static T[] sqrt(T[] v) {
            var result = new T[v.Length];
            for (int i = 0; i < v.Length; i++)
                result[i] = (T)System.Math.Sqrt(v[i]);

            return result;
        }

        public static T[] sin(T[] v) {
            var result = new T[v.Length];
            for (int i = 0; i < v.Length; i++)
                result[i] = (T)System.Math.Sin(v[i]);

            return result;
        }

        public static T[] cos(T[] v) {
            var result = new T[v.Length];
            for (int i = 0; i < v.Length; i++)
                result[i] = (T)System.Math.Cos(v[i]);

            return result;
        }

        public static T[] tan(T[] v) {
            var result = new T[v.Length];
            for (int i = 0; i < v.Length; i++)
                result[i] = (T)System.Math.Tan(v[i]);

            return result;
        }

        public static T[] plus(T[] a, T[] b) {
            if (a.Length != b.Length)
                throw new System.ArgumentException("vector operands dimensions do not match");

            var result = new T[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] + b[i];

            return result;
        }

        public static T[] minus(T[] a, T[] b) {
            if (a.Length != b.Length)
                throw new System.ArgumentException("vector operands dimensions do not match");

            var result = new T[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] - b[i];

            return result;
        }

        public static T[] atan2(T[] a, T[] b) {
            if (a.Length != b.Length)
                throw new System.ArgumentException("vector operands dimensions do not match");

            var result = new T[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (T)System.Math.Atan2(a[i], b[i]);

            return result;
        }


    }
}
