// This file is autogenerated. Edit VectorN.tt instead.
namespace AntilatencyMath {
    using number = System.Double;
    using numberN = double3;
    using numberQ = doubleQ;

    #if UNITY_5_3_OR_NEWER
    [System.Serializable]
    #endif
    public partial struct double3 {

        public number x, y, z;

        public double3 (number x, number y, number z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        public number this[int idx] {
            get {
                CheckIndex(idx);
                switch (idx) {
                    default:
                    case 0: return x;
                    case 1: return y;
                    case 2: return z;
                }
            }

            set {
                CheckIndex(idx);
                switch (idx) {
                    case 0: x = value; return;
                    case 1: y = value; return;
                    case 2: z = value; return;
                }
            }
        }

        public number sqrMagnitude {
            get { return x * x + y * y + z * z; }
        }

        public number magnitude {
            get { return (number)System.Math.Sqrt(sqrMagnitude); }
        }

        public numberN normalized {
            get { return this / magnitude; }
        }

        public void normalize() {
            var mag = magnitude;
            x /= mag;
            y /= mag;
            z /= mag;
        }

        public float2 toFloat2() {
            return new float2((float)x, (float)y);
        }

        public float3 toFloat3() {
            return new float3((float)x, (float)y, (float)z);
        }

        public float4 toFloat4() {
            return new float4((float)x, (float)y, (float)z, 0);
        }

        public double2 toDouble2() {
            return new double2(x, y);
        }

        public double4 toDouble4() {
            return new double4(x, y, z, 0);
        }

        public number[] toArray() {
            return new number[] { x, y, z };
        }

        public static readonly numberN zero =
            new numberN(0, 0, 0);

        public static readonly numberN ones =
            new numberN(1, 1, 1);

        public static readonly numberN posX =
            new numberN(1, 0, 0);

        public static readonly numberN negX =
            new numberN(-1, 0, 0);

        public static readonly numberN posY =
            new numberN(0, 1, 0);

        public static readonly numberN negY =
            new numberN(0, -1, 0);

        public static readonly numberN posZ =
            new numberN(0, 0, 1);

        public static readonly numberN negZ =
            new numberN(0, 0, -1);

        public static numberN operator - (numberN a) {
            return new numberN(-a.x, -a.y, -a.z);
        }

        public static numberN operator + (numberN a, numberN b) {
            return new numberN(a.x + b.x, a.y + b.y, a.z + b.z);
        }

        public static numberN operator - (numberN a, numberN b) {
            return new numberN(a.x - b.x, a.y - b.y, a.z - b.z);
        }

        public static numberN operator * (number a, numberN b) {
            return new numberN(a * b.x, a * b.y, a * b.z);
        }

        public static numberN operator * (numberN a, number b) {
            return new numberN(a.x * b, a.y * b, a.z * b);
        }

        public static numberN operator * (numberN a, numberN b) {
            return new numberN(a.x * b.x, a.y * b.y, a.z * b.z);
        }

        public static numberN operator / (numberN a, number b) {
            return new numberN(a.x / b, a.y / b, a.z / b);
        }

        public override string ToString() {
            return x.ToString() + " " + y.ToString() + " " + z.ToString();
        }

        private static void CheckIndex(int idx) {
            if (idx < 0 || idx >= 3)
                throw new System.IndexOutOfRangeException();
        }
    }

    public static partial class Mathx {

        public static numberN lerp(numberN a, numberN b, number t) {
            return (1 - t) * a + t * b;
        }

        public static number dot(numberN a, numberN b) {
            return a.x * b.x + a.y * b.y + a.z * b.z;
        }

        public static numberN cross(numberN a, numberN b) {
            return new numberN(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
        }

        public static double3x3 crossMatrix(numberN v) {
            return new double3x3(
                0,   -v.z,  v.y,
                v.z,    0, -v.x,
               -v.y,  v.x,    0
            );
        }

        public static numberN perpendicular(numberN v) {

            numberN vAbs = abs(v);

            number minComponentAbs = vAbs.x;
            numberN w = numberN.posX;

            if (vAbs.y < minComponentAbs) {
                minComponentAbs = vAbs.y;
                w = numberN.posY;
            }
            
            if (vAbs.z < minComponentAbs) {
                w = numberN.posZ;
            }

            return cross(v, w).normalized;
        }

        public static double3x2 outer(numberN a, double2 b) {
            return new double3x2(
                a.x * b.x, a.x * b.y,
                a.y * b.x, a.y * b.y,
                a.z * b.x, a.z * b.y
            );
        }
        public static double3x3 outer(numberN a, double3 b) {
            return new double3x3(
                a.x * b.x, a.x * b.y, a.x * b.z,
                a.y * b.x, a.y * b.y, a.y * b.z,
                a.z * b.x, a.z * b.y, a.z * b.z
            );
        }
        public static double3x4 outer(numberN a, double4 b) {
            return new double3x4(
                a.x * b.x, a.x * b.y, a.x * b.z, a.x * b.w,
                a.y * b.x, a.y * b.y, a.y * b.z, a.y * b.w,
                a.z * b.x, a.z * b.y, a.z * b.z, a.z * b.w
            );
        }
        public static numberN abs(numberN v) {
            var result = new numberN();
            result.x = abs(v.x);
            result.y = abs(v.y);
            result.z = abs(v.z);

            return result;
        }

        public static numberN sqr(numberN v) {
            var result = new numberN();
            result.x = sqr(v.x);
            result.y = sqr(v.y);
            result.z = sqr(v.z);

            return result;
        }

        public static numberN sqrt(numberN v) {
            var result = new numberN();
            result.x = sqrt(v.x);
            result.y = sqrt(v.y);
            result.z = sqrt(v.z);

            return result;
        }

        public static numberN exp(numberN v) {
            var result = new numberN();
            result.x = exp(v.x);
            result.y = exp(v.y);
            result.z = exp(v.z);

            return result;
        }

        public static numberN log(numberN v) {
            var result = new numberN();
            result.x = log(v.x);
            result.y = log(v.y);
            result.z = log(v.z);

            return result;
        }

        public static numberN sin(numberN v) {
            var result = new numberN();
            result.x = sin(v.x);
            result.y = sin(v.y);
            result.z = sin(v.z);

            return result;
        }

        public static numberN cos(numberN v) {
            var result = new numberN();
            result.x = cos(v.x);
            result.y = cos(v.y);
            result.z = cos(v.z);

            return result;
        }

        public static numberN tan(numberN v) {
            var result = new numberN();
            result.x = tan(v.x);
            result.y = tan(v.y);
            result.z = tan(v.z);

            return result;
        }

        public static numberN plus(numberN a, numberN b) {
            var result = new numberN();
            result.x = plus(a.x, b.x);
            result.y = plus(a.y, b.y);
            result.z = plus(a.z, b.z);

            return result;
        }

        public static numberN minus(numberN a, numberN b) {
            var result = new numberN();
            result.x = minus(a.x, b.x);
            result.y = minus(a.y, b.y);
            result.z = minus(a.z, b.z);

            return result;
        }

        public static numberN atan2(numberN a, numberN b) {
            var result = new numberN();
            result.x = atan2(a.x, b.x);
            result.y = atan2(a.y, b.y);
            result.z = atan2(a.z, b.z);

            return result;
        }


    }
}
