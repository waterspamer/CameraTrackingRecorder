// This file is autogenerated. Edit Quaternion.tt instead.
namespace AntilatencyMath {
    using System;

    using number = System.Single;
    using number3 = float3;
    using numberQ = floatQ;
    using numberP3Q = floatP3Q;

    #if UNITY_5_3_OR_NEWER
    [System.Serializable]
    #endif
    public partial struct floatP3Q {

        public number3 position;
        public numberQ rotation;

        public floatP3Q(number3 position, numberQ rotation) {
            this.position = position;
            this.rotation = rotation;
        }

        public floatP3Q(number3 position) {
            this.position = position;
            this.rotation = numberQ.identity;
        }

        public floatP3Q(numberQ rotation) {
            this.position = number3.zero;
            this.rotation = rotation;
        }

        public numberP3Q conjugate {
            get {
                var conjRotation = rotation.conjugate;
                return new numberP3Q(-(conjRotation * position), conjRotation);
            }
        }

        public numberP3Q inverse {
            get {
                var invRotation = rotation.inverse;
                return new numberP3Q(-(invRotation * position), invRotation);
            }
        }

        public static numberP3Q zero {
            get { return new numberP3Q(number3.zero, numberQ.zero); }
        }

        public static numberP3Q identity {
            get { return new numberP3Q(number3.zero, numberQ.identity); }
        }

        public static numberP3Q operator * (numberP3Q a, numberP3Q b) {
            return new numberP3Q(
                a.position + a.rotation * b.position,
                a.rotation * b.rotation
            );
        }

        public static number3 operator * (numberP3Q p, number3 v) {
            return p.position + p.rotation * v;
        }
    }
}
