<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".dummy" #>
<#@ include file="TemplateHelpers/T4MultipleOutputs.ttinclude" #>
<#@ include file="TemplateHelpers/T4AnonymousList.ttinclude" #>
<#@ include file="TemplateHelpers/T4GenShortcuts.ttinclude" #>
<#@ include file="TemplateHelpers/T4StringUtils.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
    System.Func<
        System.Func<string, string>,
        System.Func<string, string>
    > Id1 = x => x;

    System.Func<
        System.Func<string, string, string>,
        System.Func<string, string, string>
    > Id2 = x => x;

    var numberTypes = CreateList(
        new { shortName="float",  qualifiedName="System.Single" },
        new { shortName="double", qualifiedName="System.Double" }
    );

    var unaryElementwiseFunctions = CreateList(
        new { name = "abs",  apply = Id1(x => $"(T)System.Math.Abs({x})") },
        new { name = "sqr",  apply = Id1(x => $"{x} * {x}") },
        new { name = "sqrt", apply = Id1(x => $"(T)System.Math.Sqrt({x})") },
        new { name = "sin",  apply = Id1(x => $"(T)System.Math.Sin({x})") },
        new { name = "cos",  apply = Id1(x => $"(T)System.Math.Cos({x})") },
        new { name = "tan",  apply = Id1(x => $"(T)System.Math.Tan({x})") }
    );

    var binaryElementwiseFunctions = CreateList(
        new { name="plus",  apply = Id2((a, b) => $"{a} + {b}") },
        new { name="minus", apply = Id2((a, b) => $"{a} - {b}") },
        new { name="atan2", apply = Id2((a, b) => $"(T)System.Math.Atan2({a}, {b})") }
    );

    var variants =
        from numType in numberTypes
        select new {
            outputName = $"Mathx_ArrayMatrix_{numType.shortName}",
            numberType = numType
        };

    MultipleOutputs.OutputExtension = ".cs";
    MultipleOutputs.OutputDirectory = "Src/Generated";

    MultipleOutputs.ForEachVariant(this.GenerationEnvironment, variants, v => {
#>
// This file is autogenerated. Edit Mathx_ArrayMatrix.tt instead.
namespace AntilatencyMath {

    using T = <#= v.numberType.qualifiedName #>;

    public static partial class Mathx {

        public static int numRows(this T[,] matrix) {
            return matrix.GetLength(0);
        }

        public static int numCols(this T[,] matrix) {
            return matrix.GetLength(1);
        }

        public static T[] row(this T[,] matrix, int i) {
            var numRows = matrix.numRows();
            if (i < 0 || i >= numRows)
                throw new System.ArgumentOutOfRangeException("i", "row index is out of range");

            var nCols = matrix.numCols();
            var result = new T[nCols];
            for (int j = 0; j < nCols; j++)
                result[j] = matrix[i, j];

            return result;
        }

        public static T[] col(this T[,] matrix, int j) {
            var nCols = matrix.numCols();
            if (j < 0 || j >= nCols)
                throw new System.ArgumentOutOfRangeException("j", "column index is out of range");

            var nRows = matrix.numRows();
            var result = new T[nRows];
            for (int i = 0; i < nRows; i++)
                result[i] = matrix[i, j];

            return result;
        }

        public static void setRow(this T[,] matrix, int i, T[] value) {
            var nRows = matrix.numRows();
            if (i < 0 || i >= nRows)
                throw new System.ArgumentOutOfRangeException("i", "row index is out of range");

            var nCols = matrix.numCols();
            for (int j = 0; j < nCols; j++)
                matrix[i, j] = value[j];
        }

        public static void setCol(this T[,] matrix, int j, T[] value) {
            var nCols = matrix.numCols();
            if (j < 0 || j >= nCols)
                throw new System.ArgumentOutOfRangeException("j", "column index is out of range");

            var nRows = matrix.numRows();
            for (int i = 0; i < nRows; i++)
                matrix[i, j] = value[i];
        }

        public static T[,] selectRowsCols(this T[,] matrix, int[] rows, int[] cols) {
            var result = new T[rows.Length, cols.Length];
            for (int i = 0; i < rows.Length; i++) {
                for (int j = 0; j < cols.Length; j++)
                    result[i, j] = matrix[rows[i], cols[j]];
            }

            return result;
        }

        public static T trace(T[,] matrix) {
            int nRows = Mathx.numRows(matrix);
            int nCols = Mathx.numCols(matrix);
            int n = System.Math.Min(nRows, nCols);

            T result = 0;
            for (int i = 0; i < n; i++)
                result += matrix[i, i];

            return result;
        }

        public static T maxAbs(T[,] matrix) {
            int nRows = Mathx.numRows(matrix);
            int nCols = Mathx.numCols(matrix);

            T maxAbs = 0;
            for (int i = 0; i < nRows; i++) {
                for (int j = 0; j < nCols; j++) {
                    var abs = System.Math.Abs(matrix[i, j]);
                    if (abs > maxAbs)
                        maxAbs = abs;
                }
            }

            return maxAbs;
        }

<# foreach (var f in unaryElementwiseFunctions) { #>
        public static T[,] <#= f.name #>(T[,] m) {
            int nRows = m.GetLength(0);
            int nCols = m.GetLength(1);
            var result = new T[nRows, nCols];
            for (int i = 0; i < result.Length; i++) {
                for (int j = 0; j < result.Length; j++)
                    result[i, j] = <#= f.apply("m[i, j]") #>;
            }

            return result;
        }

<# } #>

<# foreach (var f in binaryElementwiseFunctions) { #>
        public static T[,] <#= f.name #>(T[,] a, T[,] b) {
            int aNumRows = a.numRows();
            int aNumCols = a.numCols();
            int bNumRows = b.numRows();
            int bNumCols = b.numCols();
            if (aNumRows != bNumRows || aNumCols != bNumCols)
                throw new System.ArgumentException("matrix operands dimensions do not match");

            var result = new T[aNumRows, aNumCols];
            for (int i = 0; i < aNumRows; i++) {
                for (int j = 0; j < aNumCols; j++)
                    result[i, j] = <#= f.apply("a[i, j]", "b[i, j]") #>;
            }

            return result;
        }

<# } #>

        public static T[,] mul(T[,] a, T[,] b) {
            int aNumRows = a.numRows();
            int aNumCols = a.numCols();
            int bNumRows = b.numRows();
            int bNumCols = b.numCols();

            if (aNumCols != bNumRows)
                throw new System.ArgumentException("invalid matrix operands dimensions");

            var result = new T[aNumRows, bNumCols];
            for (int i = 0; i < aNumRows; i++) {

                for (int j = 0; j < bNumCols; j++) {
                    T sum = 0;
                    for (int k = 0; k < aNumCols; k++)
                        sum += a[i, k] * b[k, j];

                    result[i, j] = sum;
                }
            }

            return result;
        }

        public static T[] mul(T[,] a, T[] b) {
            int aNumRows = a.numRows();
            int aNumCols = a.numCols();

            if (aNumCols != b.Length)
                throw new System.ArgumentException("invalid matrix operands dimensions");

            var result = new T[aNumRows];
            for (int i = 0; i < aNumRows; i++) {

                T sum = 0;
                for (int k = 0; k < aNumCols; k++)
                    sum += a[i, k] * b[k];

                result[i] = sum;
            }

            return result;
        }
    }
}
<# }); #>